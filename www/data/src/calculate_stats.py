# DESCRIPTION
# This script is for parsing the gazePredictionsDone.csv generaterd by the webgazerExtractServer. 

import sys
import os
import csv
import numpy as np

EXCLUDE = ["participant_characteristics.csv"]

def parse_gaze_predictions(filename):
    if filename[-4:] != ".csv":
        print("Failed. Please provide the csv file generated by webgazerExtractServer.py")
        exit()
    with open(filename, "r") as csv_file:
        data = np.array(list(csv.reader(csv_file)))
    fieldnames = data[0]
    data = data[1:]
    return fieldnames, data.T

def calc_gaze_error(tobiiLeftX, tobiiLeftY, tobiiRightX, tobiiRightY, webGazerX, webGazerY):
    i = 0
    error_x = 0
    error_y = 0
    valid = 0
    while i < len(webGazerX):
        vals = [tobiiLeftX[i], tobiiLeftY[i], tobiiRightX[i], tobiiRightY[i], webGazerX[i], webGazerY[i]]
        if [val for val in vals if val in ['-1','']]:
            i += 1
            continue
        average_true_x = (float(vals[0]) + float(vals[2]))/2
        average_true_y = (float(vals[1]) + float(vals[3]))/2
        error_x += abs(average_true_x - float(vals[4]))
        error_y += abs(average_true_y - float(vals[5]))
        valid += 1
        i += 1
    return error_x/valid, error_y/valid

def run_for_file(filename):
    fieldnames, data = parse_gaze_predictions(filename)
    error_x, error_y = calc_gaze_error(data[np.where(fieldnames == "tobiiLeftScreenGazeX")[0][0]],
                                       data[np.where(fieldnames == "tobiiLeftScreenGazeY")[0][0]],
                                       data[np.where(fieldnames == "tobiiRightScreenGazeX")[0][0]],
                                       data[np.where(fieldnames == "tobiiRightScreenGazeY")[0][0]],
                                       data[np.where(fieldnames == "webGazerX")[0][0]],
                                       data[np.where(fieldnames == "webGazerY")[0][0]])
    return [error_x, error_y]

def main():
    csv_count, error_x, error_y = [0, 0, 0]
    for path, subdirs, files in os.walk(sys.argv[1]):
        for name in files:
            if name[-4:] == ".csv" and name not in EXCLUDE:
                x, y = run_for_file(path + "/" + name)
                error_x += x
                error_y += y
                csv_count += 1
    error_x = error_x/csv_count
    error_y = error_y/csv_count
    print([error_x, error_y])

if __name__ == "__main__":
    main()
